{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["item","id","v4","name","item2","App","useState","text","setText","title","items","state","setstate","className","placeholder","type","value","onChange","e","target","required","onClick","alert","prev","todo","irfan","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","isDragging","draggableProps","dragHandleProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAMMA,EAAK,CACTC,GAAIC,cACJC,KAAM,yBAEFC,EAAM,CACVH,GAAIC,cACJC,KAAM,kCAkJOE,MAhJf,WAAe,MAISC,mBAAS,IAJlB,mBAIRC,EAJQ,KAIFC,EAJE,OAKaF,mBAAS,CACjC,KAAO,CACLG,MAAO,OACPC,MAAM,CAACV,EAAKI,IAEd,cAAc,CACZK,MAAO,cACPC,MAAM,IAER,KAAO,CACLD,MAAM,OACNC,MAAM,MAhBG,mBAKNC,EALM,KAKCC,EALD,KAqFd,OACG,yBAAKC,UAAU,QAEjB,2CACA,yBAAKA,UAAW,WACR,2BAAQC,YAAY,uBAAuBC,KAAK,OAAOC,MAAOT,EAAMU,SAAU,SAACC,GAAD,OAAMV,EAAQU,EAAEC,OAAOH,QAAQI,UAAQ,IACpH,4BAAQP,UAAW,SAAUQ,QAhDxB,WACZ,GAAU,KAAPd,EACD,OAAOe,MAAM,sBAEfV,GAAS,SAAAW,GAGP,OAAO,2BACFA,GADL,IAEAC,KAAK,CACHf,MAAM,OACNC,MAAM,CACJ,CACET,GAAIC,cACJC,KAAMI,IAHL,mBAKAgB,EAAKC,KAAKd,cAInBF,EAAQ,MA4BD,YACC,4BAAQK,UAAW,SAAUQ,QA1BxB,WACb,GAAU,KAAPd,EACD,OAAOe,MAAM,sBAGfV,GAAS,SAAAW,GAEP,OAAO,2BACFA,GADL,IAEAE,MAAM,CACJhB,MAAOF,EACPG,MAAM,SAGVF,EAAQ,MAYA,cAER,yBAAKK,UAAU,OACb,kBAAC,IAAD,CAAiBa,UA1EC,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAEnC,IAAID,EACF,OAAO,KAGT,GAAGA,EAAYE,QAAUD,EAAOC,OAASF,EAAYG,cAAgBF,EAAOE,YAE9E,OAAO,KAGT,IAAMC,EAAQ,eAAMpB,EAAMiB,EAAOE,aAAapB,MAAMkB,EAAOC,QAE3DjB,GAAS,SAAAW,GAIP,OAHAA,EAAK,eAAIA,IACJK,EAAOE,aAAapB,MAAMsB,OAAOJ,EAAOC,MAAO,GACpDN,EAAKI,EAAYG,aAAapB,MAAMsB,OAAQL,EAAYE,MAAO,EAAGE,GAC3DR,OA0DAU,IAAEC,IAAIvB,GAAO,SAACwB,EAAKC,GAClB,OACE,yBAAKA,IAAKA,EAAKvB,UAAW,UACxB,4BAAKsB,EAAK1B,OAEV,kBAAC,IAAD,CAAWqB,YAAaM,IACrB,SAACC,EAAUC,GACV,OACE,uCAAKC,IAAKF,EAASG,UAAcH,EAASI,eAA1C,CAA0D5B,UAAW,kBAClEsB,EAAKzB,MAAMwB,KAAI,SAACQ,EAAIb,GACnB,OACE,kBAAC,IAAD,CAAWO,IAAKM,EAAGzC,GAAI4B,MAAOA,EAAOc,YAAaD,EAAGzC,KAClD,SAACoC,EAASC,GAET,OACE,6BACT,uCAAKzB,UAAS,eAAUyB,EAASM,YAAc,YAAeL,IAAKF,EAASG,UAAcH,EAASQ,eAAoBR,EAASS,iBACtHJ,EAAGvC,KAEN,4BAASU,UAAW,SAAUQ,QAAS,MAAvC,aAUPgB,EAASvB,wBC/HZiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cdd24f8.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport {v4} from 'uuid'\nimport './App.css';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport _ from 'lodash';\n\nconst item={\n  id: v4(),\n  name: \"Have a client meeting\"\n}\nconst item2={\n  id: v4(),\n  name: \"Complete the freelance project\"\n}\nfunction App() {\n\n  //const [del, setdel] = useState(\"\")\n\nconst [text, setText] = useState(\"\")\n  const [state, setstate] = useState({\n    \"todo\":{\n      title: \"Todo\",\n      items:[item,item2]\n    },\n    \"in-progress\":{\n      title: \"In progress\",\n      items:[]\n    },\n    \"done\":{\n      title:\"Done\",\n      items:[]\n    }\n\n  })\n\n  const handleDragEnd = ({destination, source})=>{\n       \n    if(!destination){\n      return null\n    }\n\n    if(destination.index === source.index && destination.droppableId === source.droppableId)\n{\n  return null\n}\n\nconst itemCopy ={...state[source.droppableId].items[source.index]}\n\nsetstate(prev=>{\n  prev={...prev}\n  prev[source.droppableId].items.splice(source.index, 1)\n  prev[destination.droppableId].items.splice( destination.index, 0, itemCopy)\n  return prev\n})\n\n  }\n\n  const addItem=() =>{\n    if(text===''){\n      return alert(\"Bro,Type something\")\n    }\n    setstate(prev=>{\n      \n      \n      return {\n        ...prev,\n      todo:{\n        title:\"Todo\",\n        items:[\n          {\n            id: v4(),\n            name: text\n          },\n          ...prev.todo.items\n        ]\n      }}\n    })\n    setText(\"\")\n  }\n\n  const add2Item=()=>{\n    if(text===''){\n      return alert(\"Bro,Type something\")\n    }\n\n    setstate(prev=>{\n    \n      return {\n        ...prev,\n      irfan:{\n        title: text,\n        items:[]\n      }}\n    })\n    setText(\"\")\n\n    \n    \n  }\n return (\n    <div className=\"main\">\n\n  <h1>Scrum Board</h1>\n  <div className={\"additem\"} >\n          <input  placeholder=\"Add Task / Add Board\" type=\"text\" value={text} onChange={(e)=> setText(e.target.value)} required></input>\n           <button className={\"addBtn\"} onClick={addItem}>Add Task</button>\n            <button className={\"addBtn\"} onClick={add2Item}>Add Board</button>\n                            </div>\n    <div className=\"App\">\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {_.map(state, (data,key)=>{\n          return(\n            <div key={key} className={\"column\"} >\n              <h2>{data.title}</h2>\n              \n              <Droppable droppableId={key} >\n                {(provided, snapshot)=>{\n                  return(\n                    <div ref={provided.innerRef} {...provided.droppableProps} className={\"droppable-col\"} >\n                      {data.items.map((el, index)=>{\n                        return(\n                          <Draggable key={el.id} index={index} draggableId={el.id}>\n                            {(provided,snapshot)=>{\n\n                              return(\n                                <div>\n                       <div className={`item ${snapshot.isDragging && \"dragging\"}`}  ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                {el.name}\n                             \n                              <button  className={\"delBtn\"} onClick={null}>X</button>\n                              </div> \n                                </div>\n                              )\n                             \n                            }}\n\n                          </Draggable>\n                        )\n                      })}\n                      {provided.placeholder}\n                     \n                    </div>\n                  )\n\n                }}\n              </Droppable>\n              \n            </div>\n          )\n        })}\n\n      </DragDropContext>\n      </div>\n      </div>\n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}